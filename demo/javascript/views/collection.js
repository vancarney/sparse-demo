// Generated by CoffeeScript 1.6.2
var SparseDemo, global,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

global = typeof exports !== "undefined" && exports !== null ? exports : window;

if (!global.SparseDemo) {
  SparseDemo = global.SparseDemo = {};
}

(function($) {
  'use strict';
  var _ref;

  return SparseDemo.CollectionView = (function(_super) {
    var _ref1, _ref2, _ref3;

    __extends(CollectionView, _super);

    function CollectionView() {
      _ref = CollectionView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    CollectionView.prototype.reset = function() {
      return this.collection.reset([]);
    };

    CollectionView.prototype.init = function(o) {
      var _this = this;

      return this.collection.on('add remove change reset', function() {
        return _this.$el.find('#submit_query').attr('disabled', _this.collection.length < 1);
      });
    };

    CollectionView.prototype.loadCollection = function() {
      var options, opts;

      options = this['form'].getSettings();
      opts = {
        reset: true,
        error: function(m, r, o) {
          this.trigger('loadingStop');
          return console.log('failed to fetch collection');
        }
      };
      return this.collection.fetch(_.extend(options, opts));
    };

    CollectionView.prototype.collection = new (SparseDemo.TestCompanies = (function(_super1) {
      var _ref2;

      __extends(TestCompanies, _super1);

      function TestCompanies() {
        _ref1 = TestCompanies.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      TestCompanies.prototype.model = SparseDemo.TestCompany = (function(_super2) {
        __extends(TestCompany, _super2);

        function TestCompany() {
          _ref2 = TestCompany.__super__.constructor.apply(this, arguments);
          return _ref2;
        }

        return TestCompany;

      })(sparse.Model);

      return TestCompanies;

    })(sparse.Collection));

    CollectionView.prototype.childrenComplete = function() {
      var _this = this;

      this['form'].on('load', function(options) {
        if (options == null) {
          options = {};
        }
        return _this.loadCollection(options);
      });
      return this;
    };

    CollectionView.prototype.subviews = {
      'table': SparseDemo.CollectionTable = (function(_super1) {
        __extends(CollectionTable, _super1);

        function CollectionTable() {
          _ref2 = CollectionTable.__super__.constructor.apply(this, arguments);
          return _ref2;
        }

        CollectionTable.prototype.template = $('#textCompaniesItem').html();

        CollectionTable.prototype.setData = function(data) {
          var _this = this;

          if (data.length) {
            this.$el.find('tbody tr').remove();
            return _.each(data, function(v, k) {
              return _this.$el.find('tbody').append(_.template(_this.template, v.toJSON()));
            });
          } else {
            this.$el.find('tbody tr').remove();
            return this.$el.find('tbody').append(this.__o_template);
          }
        };

        CollectionTable.prototype.init = function(o) {
          var _this = this;

          this.__o_template = this.$el.find('tbody tr');
          return this.__parent.collection.on('reset', function(evt) {
            _this.__parent.trigger('loadingStop');
            return _this.setData(_this.__parent.collection.models);
          });
        };

        return CollectionTable;

      })(SparseDemo.BaseView),
      'form': SparseDemo.CollectionForm = (function(_super1) {
        __extends(CollectionForm, _super1);

        function CollectionForm() {
          _ref3 = CollectionForm.__super__.constructor.apply(this, arguments);
          return _ref3;
        }

        CollectionForm.prototype.getSettings = function() {
          var active, opts;

          opts = {
            limit: Number(this.$el.find('#limit').val())
          };
          if (((active = this.$el.find('#active').val()) != null) && active !== "") {
            opts.where = {
              active: Boolean(active)
            };
          }
          return opts;
        };

        CollectionForm.prototype.events = {
          'click #submit_query': function(evt) {
            evt.preventDefault();
            this.trigger('load');
            return false;
          }
        };

        return CollectionForm;

      })(SparseDemo.BaseView)
    };

    return CollectionView;

  })(SparseDemo.BaseView);
})(jQuery);
