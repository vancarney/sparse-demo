// Generated by CoffeeScript 1.6.2
var SparseDemo, global,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

global = typeof exports !== "undefined" && exports !== null ? exports : window;

if (!global.SparseDemo) {
  SparseDemo = global.SparseDemo = {};
}

(function($) {
  'use strict';
  var _ref;

  return SparseDemo.BatchView = (function(_super) {
    var _ref1;

    __extends(BatchView, _super);

    function BatchView() {
      _ref = BatchView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    BatchView.prototype.reset = function() {
      this.collection.reset();
      return this.$el.find('textarea').val('').trigger('change');
    };

    BatchView.prototype.collection = new sparse.Batch();

    BatchView.prototype.loadForm = function() {
      var models,
        _this = this;

      return (models = new SparseDemo.DefaultData).fetch({
        success: function(model, response, options) {
          _.each(_.keys(models.attributes), function(v, k) {
            return _this.collection.add(models[v].models);
          });
          return _this['form'].setData(response);
        },
        error: function(model, response, options) {
          return console.log("error: " + (JSON.stringify(response)));
        }
      });
    };

    BatchView.prototype.sendForm = function(data) {
      var _this = this;

      this.trigger('loadingStart');
      return this.collection.exec({
        success: function(m, r, o) {},
        complete: function(m, r, o) {
          var d;

          _this.trigger('loadingStop');
          if (typeof (d = JSON.parse(_this['form'].getData()))['TestCompanies'] !== 'undefind' && d['TestCompanies'].length) {
            _this.trigger('defaultDataLoaded');
          }
          return _this.__parent.collection.destroy(_.flatten(m));
        },
        error: function(m, r, o) {
          this.trigger('loadingStop');
          return console.log(m);
        }
      });
    };

    BatchView.prototype.childrenComplete = function() {
      var _this = this;

      this['form'].on('load', function(evt) {
        return _this.loadForm();
      });
      return this['form'].on('send', function(evt, data) {
        return _this.sendForm(data);
      });
    };

    BatchView.prototype.subviews = {
      'form': SparseDemo.BatchForm = (function(_super1) {
        __extends(BatchForm, _super1);

        function BatchForm() {
          _ref1 = BatchForm.__super__.constructor.apply(this, arguments);
          return _ref1;
        }

        BatchForm.prototype.events = {
          'change textarea': 'onDataChanged',
          'click #load': 'loadClicked',
          'click #send': 'sendClicked'
        };

        BatchForm.prototype.loadClicked = function(evt) {
          evt.preventDefault();
          this.trigger('load');
          return false;
        };

        BatchForm.prototype.sendClicked = function(evt) {
          evt.preventDefault();
          this.trigger('send', this.getData());
          return false;
        };

        BatchForm.prototype.onDataChanged = function(evt) {
          var d;

          return this.$el.find('#send').attr('disabled', (d = this.getData()).length === 0);
        };

        BatchForm.prototype.setData = function(d) {
          var t;

          (t = this.$el.find('textarea')).val(JSON.stringify(d, null, 2));
          return t.trigger('change');
        };

        BatchForm.prototype.getData = function() {
          return this.$el.find('textarea').val();
        };

        return BatchForm;

      })(SparseDemo.APIFormView)
    };

    return BatchView;

  })(SparseDemo.BaseView);
})(jQuery);
