// Generated by CoffeeScript 1.6.2
var SparseDemo, global,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

global = typeof exports !== "undefined" && exports !== null ? exports : window;

if (!global.SparseDemo) {
  SparseDemo = global.SparseDemo = {};
}

(function($) {
  'use strict';
  var _ref;

  return SparseDemo.UserView = (function(_super) {
    var _ref1;

    __extends(UserView, _super);

    function UserView() {
      _ref = UserView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    UserView.prototype.reset = function() {
      var _this = this;

      if (!this['form'].model.isNew()) {
        if (!sparse.SESSION_TOKEN) {
          return this['form'].model.login(this['form'].model.get('username'), this['form'].model.get('password'), {
            success: function(m, r, o) {
              return _this.reset();
            }
          });
        } else {
          return this['form'].model.destroy({
            success: function() {
              _this['form'].model.clear();
              _this['form'].model.set(_this['form'].__defaults);
              return _this['form'].$el.find('#create_user').attr('disabled', false).siblings().attr('disabled', true);
            }
          });
        }
      }
    };

    UserView.prototype.subviews = {
      'form': SparseDemo.UserForm = (function(_super1) {
        __extends(UserForm, _super1);

        function UserForm() {
          _ref1 = UserForm.__super__.constructor.apply(this, arguments);
          return _ref1;
        }

        UserForm.prototype.__defaults = {
          username: "a.user",
          password: "sParse"
        };

        UserForm.prototype.model = new sparse.User({
          username: "a.user",
          password: "sParse"
        });

        UserForm.prototype.init = function(o) {
          return rivets.bind(this.el, {
            user: this.model
          });
        };

        UserForm.prototype.events = {
          'click #create_user': function(evt) {
            var _this = this;

            return this.model.save(null, {
              success: function(m, r, o) {
                $(evt.target).attr('disabled', true);
                return _this.$el.find('#login_user').attr('disabled', false);
              },
              error: function(m, r, o) {
                return console.log('failed to create user');
              }
            });
          },
          'click #login_user': function(evt) {
            var _this = this;

            evt.preventDefault();
            this.model.login(this.model.get('username'), this.model.get('password'), {
              success: function(m, r, o) {
                $(evt.target).attr('disabled', true);
                _this.$el.find('#logout_user').attr('disabled', false);
                return _this.$el.find('#destroy_user').attr('disabled', false);
              },
              error: function(m, r, o) {
                return console.log('failed to login user');
              }
            });
            return false;
          },
          'click #logout_user': function(evt) {
            evt.preventDefault();
            this.model.logout();
            this.$el.find('#login_user').attr('disabled', false).siblings().attr('disabled', true);
            return false;
          },
          'click #destroy_user': function(evt) {
            evt.preventDefault();
            this.__parent.reset();
            return false;
          }
        };

        return UserForm;

      })(SparseDemo.APIFormView)
    };

    return UserView;

  })(SparseDemo.BaseView);
})(jQuery);
